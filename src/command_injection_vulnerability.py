import socket
import subprocess

# This script uses subprocess.call with shell=True and directly incorporates user-supplied input (message) into the command string
# For example, 'cat /etc/passwd' would result in executing the cat /etc/passwd command on the server, potentially leaking sensitive information

def vulnerable_service(host='0.0.0.0', port=9999):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Listening as {host}:{port}...")

    while True:
        client_socket, address = server_socket.accept()
        print(f"{address[0]}:{address[1]} Connected!")

        message = client_socket.recv(1024).decode()
        print(f"Received: {message}")

        # Vulnerable command execution
        try:
            print("Logging message to file...")
            subprocess.call(f"echo '{message}' >> /tmp/vulnerable_log.txt", shell=True)
        except Exception as e:
            print(f"Error: {e}")

        client_socket.close()

if __name__ == "__main__":
    vulnerable_service()
